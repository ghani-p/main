"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mean",applicationModuleVendorDependencies=["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","angularFileUpload"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){return void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role)?(allowed=!0,!0):void 0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),ApplicationConfiguration.registerModule("pronouns"),ApplicationConfiguration.registerModule("users",["core","ui.sortable"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{"abstract":!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("faq",{url:"/faq",templateUrl:"modules/core/client/views/faq.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]),angular.module("core").controller("FaqController",["$scope","Authentication","Users","Profile",function($scope,Authentication,Users,Profile){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.faqs=[{title:"How do I add a set of pronouns to my profile?",content:'First browse through the available list of pronouns and click on the one you want. Then click the "+" icon to add the pronoun.'},{title:"What if my pronouns don't exist in the list yet?",content:'Click on "Create pronouns" and enter your information. Then you can click the "+" icon and add it right away. If you choose to make the pronoun "listed", it will be reviewed by a staff member later and additional details may appear on the page.'},{title:"Can I order my pronouns by preference?",content:'Yes, but at this point you can\'t use a touch screen to do this. You can go to the "update pronouns" page and drag to re-order pronouns.'}]}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","$http","Authentication","Users","Profile",function($scope,$http,Authentication,Users,Profile){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.following=[],$scope.searchResults=[],$scope.selectedUser=void 0,$scope.reloadFollowing=function(){$scope.following=[],$scope.user&&$scope.user.following.forEach(function(value){"string"!=typeof value?$scope.following.push(value):$scope.following.push(Profile.byId({id:value}))})},$scope.getUsers=function(val){return $http.get("/api/users/search/"+val).then(function(response){for(var i=response.data.length-1;i>=0;i--)(response.data[i]._id===$scope.user._id||$scope.user.following.indexOf(response.data[i]._id)>-1)&&response.data.splice(i,1);return $scope.searchResults=response.data,response.data})},$scope.addFollowing=function(){if(console.log($scope.selectedUser),void 0!==$scope.selectedUser&&$scope.selectedUser._id&&$scope.selectedUser._id!==$scope.user._id){var user=new Users($scope.user);user.following.push($scope.selectedUser._id),user.$update(function(response){$scope.selectedUser=void 0,Authentication.user=response,$scope.user=Authentication.user,$scope.reloadFollowing()},function(response){$scope.error=response.data.message})}},$scope.reloadFollowing()}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),inputName=$interpolate(inputNgEl.attr("name")||"")(scope),!inputName)throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?(initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)):void 0}),scope.$on("show-errors-reset",function(event,name){return angular.isUndefined(name)||formCtrl.$name===name?reset():void 0}),toggleClasses=function(invalid){return el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess?el.toggleClass("has-success",showValidationMessages&&!invalid):void 0}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item","class":options["class"],roles:null===options.roles||"undefined"==typeof options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||"undefined"==typeof options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("pronouns").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"List pronouns",state:"pronouns.list",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","pronouns.list",{title:"Public pronouns",state:"pronouns.list.all"}),Menus.addSubMenuItem("topbar","pronouns.list",{title:"My pronouns",state:"pronouns.list.mine",roles:["user"]}),Menus.addMenuItem("topbar",{title:"Create pronouns",state:"pronouns.create",roles:["user"]})}]),angular.module("pronouns").config(["$stateProvider",function($stateProvider){$stateProvider.state("pronouns",{"abstract":!0,url:"/pronouns",template:"<ui-view/>"}).state("pronouns.list",{url:"","abstract":!0,template:"<ui-view/>"}).state("pronouns.list.all",{url:"",templateUrl:"modules/pronouns/client/views/list-pronouns.client.view.html",controller:"PronounListController"}).state("pronouns.list.mine",{url:"/mine",templateUrl:"modules/pronouns/client/views/my-pronouns.client.view.html",controller:"MyPronounListController"}).state("pronouns.create",{url:"/create",templateUrl:"modules/pronouns/client/views/create-pronoun.client.view.html",data:{roles:["user","admin"]}}).state("pronouns.view",{url:"/:pronounId",templateUrl:"modules/pronouns/client/views/view-pronoun.client.view.html"}).state("pronouns.edit",{url:"/:pronounId/edit",templateUrl:"modules/pronouns/client/views/edit-pronoun.client.view.html",data:{roles:["user","admin"]}})}]),angular.module("pronouns").controller("CreatePronounController",["$scope","$stateParams","$location","Users","Authentication","Pronouns",function($scope,$stateParams,$location,Users,Authentication,Pronouns){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.pronoun={},$scope.pronounType="X",$scope.setType=function(type){$scope.pronounType=type},$scope.submit=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","pronounForm"),!1;var pronoun={};console.log($scope.pronounType),"X"===$scope.pronounType&&(pronoun=new Pronouns({subject:$scope.pronoun.subject,object:$scope.pronoun.object,determiner:$scope.pronoun.determiner,possessive:$scope.pronoun.possessive,reflexive:$scope.pronoun.reflexive,title:$scope.pronoun.title,pronounType:"X",listed:$scope.pronoun.listed===!0})),"M"===$scope.pronounType&&(pronoun=new Pronouns({content:$scope.pronoun.content,title:$scope.pronoun.title,pronounType:"M",listed:$scope.pronoun.listed===!0&&-1!==$scope.user.roles.indexOf("admin")})),pronoun.$save(function(response){$location.path("pronouns/"+response._id),$scope.subject="",$scope.object="",$scope.determiner="",$scope.possessive="",$scope.reflexive="",$scope.title="",$scope.content=""},function(errorResponse){console.log(errorResponse),$scope.error=errorResponse.data.message})}}]),angular.module("pronouns").controller("PronounListController",["$scope","$filter","Users","Authentication","Pronouns",function($scope,$filter,Users,Authentication,Pronouns){Pronouns.query(function(data){$scope.pronouns=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.pronouns,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("pronouns").controller("MyPronounListController",["$http","$scope","$filter","Users","Authentication",function($http,$scope,$filter,Users,Authentication){$scope.authentication=Authentication,$scope.user=Authentication.user,$http.get("/api/pronouns/mine",{}).then(function(response){$scope.pronouns=response.data,$scope.buildPager()},function(response){console.log(response)}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.pronouns,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("pronouns").controller("PronounsController",["$scope","$stateParams","$location","Users","Authentication","Pronouns",function($scope,$stateParams,$location,Users,Authentication,Pronouns){$scope.authentication=Authentication,$scope.user=Authentication.user,$scope.pronounType="X",$scope.hasPronoun=function(pronounId){for(var i=0;i<$scope.user.pronouns.length;i++)if($scope.user.pronouns[i]===pronounId)return!0;return!1},$scope.makeMine=function(pronoun){var user=new Users($scope.user);user.pronouns.push(pronoun._id),user.$update(function(response){Authentication.user=response,$scope.user=response},function(response){$scope.error=response.data.message})},$scope.removeMine=function(pronoun){var user=new Users($scope.user);user.pronouns.splice(user.pronouns.indexOf(pronoun._id),1),user.$update(function(response){Authentication.user=response,$scope.user=response},function(response){$scope.error=response.data.message})},$scope.remove=function(pronoun){if(pronoun){pronoun.$remove();for(var i in $scope.pronouns)$scope.pronouns[i]===pronoun&&$scope.pronouns.splice(i,1)}else $scope.pronoun.$remove(function(){$location.path("pronouns")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","pronounForm"),!1;var pronoun=$scope.pronoun;pronoun.$update(function(){$location.path("pronouns/"+pronoun._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.pronouns=Pronouns.query()},$scope.findOne=function(){$scope.pronoun=Pronouns.get({pronounId:$stateParams.pronounId}),console.log($scope.pronoun)}}]),angular.module("pronouns").factory("Pronouns",["$resource",function($resource){return $resource("api/pronouns/:pronounId",{pronounId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}],ownedPronounsResolve:["$stateParams","$http","$q",function($stateParams,$http,$q){var deferred=$q.defer();return $http.get("/api/pronouns/user/"+$stateParams.userId,{}).then(function(response){deferred.resolve(response.data)},function(response){deferred.resolve([])}),deferred.promise}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}],ownedPronounsResolve:["$stateParams","$http","$q",function($stateParams,$http,$q){var deferred=$q.defer();return $http.get("/api/pronouns/user/"+$stateParams.userId,{}).then(function(response){deferred.resolve(response.data)},function(response){deferred.resolve([])}),deferred.promise}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{"abstract":!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.pronouns",{url:"/pronouns",templateUrl:"modules/users/client/views/settings/update-pronouns.client.view.html",controller:"UpdatePronounsController",resolve:{pronounsResolve:["$stateParams","Pronouns","Profile","Authentication","$q",function($stateParams,Pronouns,Profile,Authentication,$q){var deferred=$q.defer();return Profile.byId({id:Authentication.user._id},function(data){deferred.resolve(data.pronouns)}),deferred.promise}]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("settings.alerts",{url:"/alerts",templateUrl:"modules/users/client/views/settings/manage-alerts.client.view.html"}).state("authentication",{"abstract":!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{"abstract":!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{"abstract":!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"}).state("profile",{url:"/users/:username",templateUrl:"modules/users/client/views/user-profile.client.view.html",controller:"UserProfileController",resolve:{profileResolve:["$stateParams","Profile",function($stateParams,Profile){return Profile.byUsername({username:$stateParams.username})}],followersResolve:["$stateParams","Followers",function($stateParams,Followers){return Followers.byUsername({username:$stateParams.username})}]}})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve","ownedPronounsResolve",function($scope,$state,Authentication,userResolve,ownedPronounsResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.ownedPronouns=ownedPronounsResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.signin=function(isValid){return $scope.error=null,isValid?void $http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","userForm"),!1)},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1)},$scope.resetUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1)}}]),angular.module("users").controller("UserProfileController",["$scope","Authentication","Users","Pronouns","$q","profileResolve","followersResolve",function($scope,Authentication,Users,Pronouns,$q,profileResolve,followersResolve){$scope.authentication=Authentication,$scope.limits={friends:5,followers:5,following:5},$q.all([profileResolve.$promise,followersResolve.$promise]).then(function(data){$scope.profile=data[0],$scope.profile.followers=data[1],$scope.createFriendList()});var intersect=function(a,b){var t;return b.length>a.length&&(t=b,b=a,a=t),a.filter(function(e){for(var i=0;i<b.length;i++)if(b[i]._id===e._id)return!0;return!1})},remove=function(array,remove){return array.filter(function(e){for(var i=0;i<remove.length;i++)if(remove[i]._id===e._id)return!1;return!0})};$scope.createFriendList=function(){$scope.profile.friends=intersect($scope.profile.following,$scope.profile.followers),$scope.profile.followers=remove($scope.profile.followers,$scope.profile.friends),$scope.profile.following=remove($scope.profile.following,$scope.profile.friends)},$scope.user=Authentication.user,$scope.addFollowing=function(){if($scope.profile._id!==$scope.user._id){var user=new Users($scope.user);user.following.push($scope.profile._id),user.$update(function(response){Authentication.user=response,$scope.user=response,$scope.profile.followers.push($scope.user),$scope.createFriendList()},function(response){$scope.error=response.data.message})}},$scope.removeFollowing=function(){if($scope.profile._id!==$scope.user._id){var user=new Users($scope.user);user.following.splice(user.following.indexOf($scope.profile._id),1),user.$update(function(response){Authentication.user=response,$scope.user=response;for(var i=$scope.profile.followers.length-1;i>=0;i--)$scope.profile.followers[i]._id===$scope.user._id&&$scope.profile.followers.splice(i,1);for(var j=$scope.profile.friends.length-1;j>=0;j--)$scope.profile.friends[j]._id===$scope.user._id&&($scope.profile.friends.splice(j,1),$scope.profile.following.push($scope.user))},function(response){$scope.error=response.data.message})}},$scope.loadMore=function(thing){$scope.limits[thing]=$scope.profile[thing].length+5}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.changeUserPassword=function(isValid){return $scope.success=$scope.error=null,isValid?void $http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message}):($scope.$broadcast("show-errors-check-validity","passwordForm"),!1)}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf(type)}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("ManageAlertsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.alerts={facebook:$scope.user.alertChannels.indexOf("facebook")>-1,email:$scope.user.alertChannels.indexOf("email")>-1,pushbullet:$scope.user.alertChannels.indexOf("pushbullet")>-1},$scope.updateAlerts=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$scope.user.alertChannels=[],$scope.alerts.facebook&&$scope.user.alertChannels.push("facebook"),$scope.alerts.email&&$scope.user.alertChannels.push("email"),
$scope.alerts.pushbullet&&($scope.user.pushbulletKey?$scope.user.alertChannels.push("pushbullet"):$scope.alerts.pushbullet=!1);var user=new Users($scope.user);user.$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,$scope.user=response,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").controller("UpdatePronounsController",["$scope","$http","$location","Users","Authentication","pronounsResolve",function($scope,$http,$location,Users,Authentication,pronounsResolve){$scope.user=Authentication.user,$scope.error={alert:""},$scope.pronouns=pronounsResolve,$scope.sortableOptions={stop:function(e,ui){if($scope.user.pronouns.length===$scope.pronouns.length){$scope.user.pronouns=[];for(var i=0;i<$scope.pronouns.length;i++)null===$scope.pronouns[i]._id?$scope.user.pronouns.push($scope.pronouns[i]):$scope.user.pronouns.push($scope.pronouns[i]._id);var user=new Users($scope.user);user.$update(function(response){Authentication.user=response,$scope.user=Authentication.user},function(response){$scope.error=response.data.message})}}},$scope.sendAlerts=function(){$http.get("/api/users/sendAlerts",{}).then(function(response){$scope.error.alert=response.message,$scope.user.canSendAlert=!1},function(response){$scope.error.alert=response.message,$scope.user.canSendAlert=!1})},$scope.removeMine=function(pronoun){var user=new Users($scope.user),index=user.pronouns.indexOf(pronoun._id);user.pronouns.splice(index,1),user.$update(function(response){Authentication.user=response,$scope.user=Authentication.user,$scope.pronouns.splice(index,1)},function(response){$scope.error=response.data.message})}}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){var origin=scope.passwordVerify;return origin!==password?!1:!0})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){var auth={user:$window.user};return auth}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){var result=owaspPasswordStrengthTest.test(password);return result},getPopoverMsg:function(){var popoverMsg="Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters.";return popoverMsg}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users").factory("Profile",["$resource",function($resource){return $resource("api/users/profile/get/:id/:username",{username:"@username",id:"@id"},{byUsername:{method:"GET",url:"api/users/profile/username/:username"},byId:{method:"GET",url:"api/users/profile/id/:id"}})}]),angular.module("users").factory("Followers",["$resource",function($resource){return $resource("api/users/followers/get/:id/:username",{username:"@username",id:"@id"},{byUsername:{method:"GET",url:"api/users/followers/username/:username",isArray:!0},byId:{method:"GET",url:"api/users/followers/id/:id",isArray:!0}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);